name: Assign selected assignees
on:
  issues:
    types: [opened, edited]

jobs:
  assign:
    permissions:
      issues: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse form and assign
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const issue = context.payload.issue;
            const body  = issue.body || "";

            // Загружаем справочник из JSON
            let dict = new Map();
            try {
              const people = JSON.parse(fs.readFileSync('data/assignees.json', 'utf8'));
              for (const p of people) {
                if (!p || !p.login) continue;
                dict.set((p.label || p.login).trim(), p.login.trim());
              }
            } catch(e) {
              core.warning('Не удалось прочитать data/assignees.json: ' + e.message);
            }

            // Ищем секцию формы "Исполнители"
            const sec = body.match(/###\s*Исполнители[\s\S]*?(?=\n###\s|\n*$)/);
            if (!sec) {
              core.info("Секция 'Исполнители' не найдена — выходим.");
              return;
            }

            // Извлекаем отмеченные пункты чек-листа
            const pickedLabels = [...sec[0].matchAll(/-\s*\[x\]\s*(.+)\s*$/gm)]
              .map(m => m[1].trim());

            if (pickedLabels.length === 0) {
              core.info("Исполнители не выбраны — выходим.");
              return;
            }

            // Сопоставляем label -> login
            const logins = [];
            for (const lbl of pickedLabels) {
              if (/^@?[A-Za-z0-9-]+$/.test(lbl)) {
                logins.push(lbl.replace(/^@/, ''));
                continue;
              }
              const m = lbl.match(/@([A-Za-z0-9-]+)/);
              if (m) { logins.push(m[1]); continue; }
              const login = dict.get(lbl);
              if (login) logins.push(login);
            }

            const unique = [...new Set(logins)].slice(0, 10);
            if (unique.length === 0) {
              core.info("Нечего назначать.");
              return;
            }

            core.info(`Назначаем: ${unique.join(", ")}`);

            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              assignees: unique
            });

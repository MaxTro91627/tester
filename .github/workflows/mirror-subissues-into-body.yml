name: Mirror Sub-issues into body
on:
  issues:
    types: [opened, edited, closed, reopened, transferred]
  workflow_dispatch:

jobs:
  mirror:
    permissions:
      issues: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Update "Подзадачи" section in the current issue (if it has sub-issues)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const num   = context.payload.issue.number;

            // 1) Забираем sub-issues для текущего issue (если доступны)
            let subIssues = [];
            try {
              const res = await github.request('GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues', {
                owner, repo, issue_number: num,
                headers: { 'X-GitHub-Api-Version': '2022-11-28' }
              });
              subIssues = res.data || [];
            } catch (e) {
              core.info('Нет sub-issues или эндпоинт недоступен: ' + e.message);
            }

            const lines = (subIssues || []).map(si => {
              const box = (si.state === 'closed') ? '[x]' : '[ ]';
              const repoPrefix = (si.repository && si.repository.full_name)
                ? `${si.repository.full_name}#${si.number}`
                : `#${si.number}`;
              const assignees = (si.assignees || []).map(a => '@' + a.login).join(', ');
              const tail = assignees ? ` (${assignees})` : '';
              return `- ${box} ${repoPrefix} — ${si.title}${tail}`;
            });

            const listBlock = lines.length
              ? lines.join('\n')
              : '_Пока нет sub-issues. Используй кнопку **Create sub-issue** ниже описания._';

            // 2) Готовим маркированный блок
            const header = '### Подзадачи';
            const startM = '<!-- SUBISSUES-MIRROR:START -->';
            const endM   = '<!-- SUBISSUES-MIRROR:END -->';
            const section = `${header}\n\n${startM}\n${listBlock}\n${endM}\n`;

            // 3) Обновляем body только в пределах наших маркеров
            const { data: cur } = await github.rest.issues.get({ owner, repo, issue_number: num });
            const body = cur.body || '';

            const blockRe = new RegExp(`${startM}[\\s\\S]*?${endM}`, 'm');
            let newBody;
            if (blockRe.test(body)) {
              newBody = body.replace(blockRe, `${startM}\n${listBlock}\n${endM}`);
            } else {
              const secRe = new RegExp(`(^|\\n)${header}[\\s\\S]*?(?=\\n###\\s|$)`, 'm');
              newBody = secRe.test(body) ? body.replace(secRe, section.trim()) : (body.trim() + '\n\n' + section).trim();
            }

            if (newBody !== body) {
              await github.rest.issues.update({ owner, repo, issue_number: num, body: newBody });
              core.info(`Секция 'Подзадачи' обновлена (${lines.length} шт.).`);
            } else {
              core.info('Изменений нет.');
            }
